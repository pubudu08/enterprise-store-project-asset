<%
//response.addHeader("Content-Type", "application/json");
print("hi");

require('/modules/publisher.js').exec(function (ctx) {

    var config = require('/config/publisher.json');
    var caramel = require('caramel');
    var carbon = require('carbon');
    var utility = require('/modules/utility.js').rxt_utility();

    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();

    var log = new Log();


    var osgiService;
    var artifactManager;
    var artifact;
    var adminService;
    var superuserService;
    var status;
    var result;
    superuserService = carbon.server.osgiServices('org.wso2.carbon.dev.govern.extractor.IPropertyExtractor');
    for (var i = 0; i < superuserService.size(); i++) {

        osgiService = superuserService.get(i);

    }

    log.info("" + superuserService);
    log.info("jenkins username = " + osgiService.getAPIConfigDetails().getJenkinsUsername());
    log.info("jenkins password = " + osgiService.getAPIConfigDetails().getJenkinsPassword());
    log.info("bamboo username = " + osgiService.getAPIConfigDetails().getBambooUsername());
    log.info("bamboo password = " + osgiService.getAPIConfigDetails().getBambooPassword());
    log.info("redmine username = " + osgiService.getAPIConfigDetails().getRedmineUsername());
    log.info("redmine password = " + osgiService.getAPIConfigDetails().getRedminePassword());
    log.info("Jira username = " + osgiService.getAPIConfigDetails().getJiraUsername());
    log.info("Jira password = " + osgiService.getAPIConfigDetails().getJiraPassword());
    log.info("GitHub username = " + osgiService.getAPIConfigDetails().getGitHubUsername());
    log.info("GitHub password = " + osgiService.getAPIConfigDetails().getGitHubPassword());
    log.info("SVN username = " + osgiService.getAPIConfigDetails().getSvnUsername());
    log.info("SVN password = " + osgiService.getAPIConfigDetails().getSvnPassword());

    log.info(status);
    result = {
        success: Boolean(status),
        status: status
    };

    print(result);
    osgiService = null;

    var securityModule = require('/modules/security/security.manager.js').securityManagementModule();

    var sm = securityModule.cached();

    //This will short circuit the handling of the requests
    var passed = sm.check(session, function () {
        response.sendError(401);
    });

    //Stop servicing the request if the check failed
    if (passed) {

        var user = require('store').user;
        var publisher = require('/modules/publisher.js').publisher(request, session);

        var rxtManager = publisher.rxtManager;
        var modelManager = publisher.modelManager;
        var tagModule = require('/modules/tag.management.js').tagModule();
        routeManager.handle(request, response);
    }

}, request, response, session);
%>